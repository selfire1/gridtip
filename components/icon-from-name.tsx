import * as Lucide from 'lucide-react'
import * as React from 'react'

export const SUPPORTED_ICON_NAMES = [
  'lucide:users',
  'lucide:accessibility',
  'lucide:album',
  'lucide:anchor',
  'lucide:atom',
  'lucide:award',
  'lucide:banana',
  'lucide:barrel',
  'lucide:beer',
  'lucide:biceps-flexed',
  'lucide:bike',
  'lucide:binoculars',
  'lucide:bird',
  'lucide:bone',
  'lucide:bot',
  'lucide:bottle-wine',
  'lucide:bow-arrow',
  'lucide:box',
  'lucide:boxes',
  'lucide:brain',
  'lucide:bus',
  'lucide:cable-car',
  'lucide:cake-slice',
  'lucide:car',
  'lucide:car-front',
  'lucide:carrot',
  'lucide:cat',
  'lucide:chef-hat',
  'lucide:church',
  'lucide:circle-user',
  'lucide:circle-user-round',
  'lucide:coffee',
  'lucide:compass',
  'lucide:construction',
  'lucide:crown',
  'lucide:dog',
  'lucide:flame-kindling',
  'lucide:ghost',
  'lucide:hand-metal',
  'lucide:laugh',
  'lucide:medal',
  'lucide:party-popper',
  'lucide:plane',
  'lucide:rainbow',
  'lucide:rocket',
  'lucide:rocking-chair',
  'lucide:scan-face',
  'lucide:send',
  'lucide:smile',
  'lucide:sparkles',
  'lucide:sprout',
  'lucide:star',
  'lucide:train-front',
  'lucide:tree-palm',
  'lucide:users-round',
  'lucide:waves',
  'lucide:zap',
] as const

export type IconName = (typeof SUPPORTED_ICON_NAMES)[number]

export function IconFromName(props: {
  iconName: string
  className?: string
  fallback?: IconName
}): React.ReactNode {
  const stringToIcon = new Map<IconName, Lucide.LucideIcon>([
    ['lucide:users', Lucide.LucideUsers],
    ['lucide:accessibility', Lucide.LucideAccessibility],
    ['lucide:album', Lucide.LucideAlbum],
    ['lucide:anchor', Lucide.LucideAnchor],
    ['lucide:atom', Lucide.LucideAtom],
    ['lucide:award', Lucide.LucideAward],
    ['lucide:banana', Lucide.LucideBanana],
    ['lucide:barrel', Lucide.LucideBarrel],
    ['lucide:beer', Lucide.LucideBeer],
    ['lucide:biceps-flexed', Lucide.LucideBicepsFlexed],
    ['lucide:bike', Lucide.LucideBike],
    ['lucide:binoculars', Lucide.LucideBinoculars],
    ['lucide:bird', Lucide.LucideBird],
    ['lucide:bone', Lucide.LucideBone],
    ['lucide:bot', Lucide.LucideBot],
    ['lucide:bottle-wine', Lucide.LucideBottleWine],
    ['lucide:bow-arrow', Lucide.LucideBowArrow],
    ['lucide:box', Lucide.LucideBox],
    ['lucide:boxes', Lucide.LucideBoxes],
    ['lucide:brain', Lucide.LucideBrain],
    ['lucide:bus', Lucide.LucideBus],
    ['lucide:cable-car', Lucide.LucideCableCar],
    ['lucide:cake-slice', Lucide.LucideCakeSlice],
    ['lucide:car', Lucide.LucideCar],
    ['lucide:car-front', Lucide.LucideCarFront],
    ['lucide:carrot', Lucide.LucideCarrot],
    ['lucide:cat', Lucide.LucideCat],
    ['lucide:chef-hat', Lucide.LucideChefHat],
    ['lucide:church', Lucide.LucideChurch],
    ['lucide:circle-user', Lucide.LucideCircleUser],
    ['lucide:circle-user-round', Lucide.CircleUserRound],
    ['lucide:coffee', Lucide.LucideCoffee],
    ['lucide:compass', Lucide.LucideCompass],
    ['lucide:construction', Lucide.LucideConstruction],
    ['lucide:crown', Lucide.LucideCrown],
    ['lucide:dog', Lucide.LucideDog],
    ['lucide:flame-kindling', Lucide.LucideFlameKindling],
    ['lucide:ghost', Lucide.LucideGhost],
    ['lucide:hand-metal', Lucide.LucideHandMetal],
    ['lucide:laugh', Lucide.LucideLaugh],
    ['lucide:medal', Lucide.LucideMedal],
    ['lucide:party-popper', Lucide.LucidePartyPopper],
    ['lucide:plane', Lucide.LucidePlane],
    ['lucide:rainbow', Lucide.LucideRainbow],
    ['lucide:rocket', Lucide.LucideRocket],
    ['lucide:rocking-chair', Lucide.LucideRockingChair],
    ['lucide:scan-face', Lucide.LucideScanFace],
    ['lucide:send', Lucide.LucideSend],
    ['lucide:smile', Lucide.LucideSmile],
    ['lucide:sparkles', Lucide.LucideSparkles],
    ['lucide:sprout', Lucide.LucideSprout],
    ['lucide:star', Lucide.LucideStar],
    ['lucide:train-front', Lucide.LucideTrainFront],
    ['lucide:tree-palm', Lucide.LucideTreePalm],
    ['lucide:users-round', Lucide.LucideUsersRound],
    ['lucide:waves', Lucide.LucideWaves],
    ['lucide:zap', Lucide.LucideZap],
  ])

  console.assert(
    SUPPORTED_ICON_NAMES.includes(props.iconName as IconName),
    'invalid icon name',
  )

  const IconComponent =
    stringToIcon.get(props.iconName as IconName) ||
    (props.fallback ? stringToIcon.get(props.fallback) : undefined)
  if (!IconComponent) {
    return
  }
  return <IconComponent className={props.className} />
}
